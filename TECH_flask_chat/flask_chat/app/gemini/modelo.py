import os
from dotenv import load_dotenv
import google.generativeai as genai
from langchain_google_genai import (
    ChatGoogleGenerativeAI,
    GoogleGenerativeAIEmbeddings,
)
from langchain.schema import SystemMessage, HumanMessage
from langchain.chains import RetrievalQA
from langchain_community.document_loaders import TextLoader
from langchain.text_splitter import CharacterTextSplitter
from langchain.vectorstores import FAISS 

# Carrega API
load_dotenv()
api_key = os.getenv("GEMINI_API_KEY")
genai.configure(api_key=api_key)

# Prompts
tutor_prompt = """
Voc√™ √© o Professor Carvalho, o renomado pesquisador do mundo Pok√©mon.

Fale com a sabedoria e a paci√™ncia de um professor experiente, sempre encorajando o aluno a aprender mais sobre os Pok√©mon.
Explique conceitos com clareza, use exemplos pr√°ticos e evite jarg√µes complicados para que qualquer treinador, do iniciante ao mais experiente, compreenda.
Incentive a curiosidade sobre tipos, habitats, habilidades e estrat√©gias.
Quando poss√≠vel, recomende o pr√≥ximo passo l√≥gico no aprendizado ou uma curiosidade interessante sobre Pok√©mon.

IMPORTANTE:
Voc√™ tem acesso a documentos para consulta, mas **n√£o deve mencionar, citar ou referir-se a eles diretamente** na resposta.
Use o conte√∫do dos documentos apenas para embasar suas explica√ß√µes e enriquecer suas respostas de forma natural e fluida.

Adote um tom amig√°vel, respeitoso e confi√°vel, como o verdadeiro Professor Carvalho.
"""

juiz_prompt = """
Voc√™ √© um avaliador cr√≠tico especializado no universo Pok√©mon.

Sua tarefa √© revisar a resposta de um tutor de IA que assume o papel do Professor Carvalho, o renomado pesquisador Pok√©mon.

Avalie a resposta como se estivesse analisando uma orienta√ß√£o feita por ele a um treinador iniciante.

Crit√©rios de avalia√ß√£o:
- A resposta est√° tecnicamente correta dentro do universo Pok√©mon (incluindo lore, mec√¢nicas, tipos, habilidades)?
- Est√° clara e compreens√≠vel para um p√∫blico com n√≠vel t√©cnico m√©dio (como treinadores no in√≠cio da jornada)?
- O tom est√° coerente com o do Professor Carvalho: s√°bio, paciente, encorajador e confi√°vel?
- O pr√≥ximo passo sugerido estimula o aprendizado cont√≠nuo (por exemplo: indicar um tipo, gera√ß√£o, estrat√©gia, jogo ou curiosidade relevante)?
- **A resposta evita mencionar ou citar diretamente os documentos usados como base**, mesmo que esteja usando informa√ß√µes extra√≠das deles.

Resultado:
- Se a resposta for satisfat√≥ria, diga ‚Äú‚úÖ Aprovado‚Äù e justifique com base nos crit√©rios.
- Se houver problemas, diga ‚Äú‚ö†Ô∏è Reprovado‚Äù e proponha uma vers√£o corrigida e melhorada.
- Siga todas as normas da l√≠ngua portuguesa!!
"""

# Fun√ß√µes auxiliares
def avaliar_resposta(pergunta, resposta_tutor):
    juiz = ChatGoogleGenerativeAI(
        model="gemini-2.0-flash",
        temperature=0.3,
        google_api_key=api_key
    )
    mensagens = [
        SystemMessage(content=juiz_prompt),
        HumanMessage(content=f"Pergunta do aluno: {pergunta}\n\nResposta do tutor: {resposta_tutor}")
    ]
    return juiz.invoke(mensagens).content

def carregar_e_dividir_documentos(pasta):
    docs = []
    for nome in os.listdir(pasta):
        if nome.endswith(".txt"):
            caminho = os.path.join(pasta, nome)
            loader = TextLoader(caminho, encoding="utf-8")
            docs.extend(loader.load())
    splitter = CharacterTextSplitter(chunk_size=500, chunk_overlap=50)
    return splitter.split_documents(docs)

def criar_index(docs_divididos):
    embeddings = GoogleGenerativeAIEmbeddings(
        google_api_key=api_key,
        model="models/embedding-001"
    )
    return FAISS.from_documents(docs_divididos, embeddings)

def criar_rag_chain_manual(retriever):
    def responder(pergunta):
        docs = retriever.get_relevant_documents(pergunta)
        contexto = "\n\n".join([doc.page_content for doc in docs[:3]])

        mensagens = [
            SystemMessage(content=tutor_prompt),
            HumanMessage(content=f"Com base nos documentos abaixo, responda como o Professor Carvalho.\n\nDocumentos:\n{contexto}\n\nPergunta: {pergunta}")
        ]

        chat = ChatGoogleGenerativeAI(
            model="gemini-2.0-flash",
            temperature=0.7,
            google_api_key=api_key
        )
        resposta = chat.invoke(mensagens).content
        return {
            "answer": resposta,
            "source_documents": docs
        }
    return responder

# üîÅ Inicializa√ß√£o √∫nica do pipeline RAG
pasta_docs = "C:/Users/juliamattos-ieg/OneDrive - Instituto Germinare/√Årea de Trabalho/2¬∞ ANO/IA/tech_flask_myrna/TECH_flask_chat/flask_chat/app/gemini/arquivos"
if not os.path.exists(pasta_docs):
    raise FileNotFoundError("‚ö†Ô∏è Pasta 'arquivos' n√£o encontrada. Coloque os documentos na pasta 'arquivos'.")

docs = carregar_e_dividir_documentos(pasta_docs)
db = criar_index(docs)
rag_chain = criar_rag_chain_manual(db.as_retriever())

# üîÅ Fun√ß√£o final para o Flask
def responder_pergunta(pergunta: str) -> dict:
    try:
        resposta = rag_chain(pergunta)
        texto_resposta = resposta['answer']
        avaliacao = avaliar_resposta(pergunta, texto_resposta)
        return {
            "resposta": texto_resposta,
            "avaliacao": avaliacao
        }
    except Exception as e:
        return {
            "resposta": f"‚ùå Erro ao gerar resposta: {str(e)}",
            "avaliacao": "‚ö†Ô∏è Avalia√ß√£o indispon√≠vel devido a erro interno"
        }